lz77.adb:110:36: medium: loop invariant might fail in first iteration, cannot prove k = (if Error or Input'Length <= 0 then 0 else if I = Input'First then (To_Integer ((Oadd ((Oadd (Zero, (To_Big_Integer (.......)))), ...)))) else ...) (e.g. when Error = False and I = 1 and Input = (1 => (Offset => 0, Length => 0, Next_C => 'NUL'), others => (Offset => 0, Length => 0, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1 and k = 0)[#3]
lz77.adb:110:36: medium: loop invariant might fail after first iteration, cannot prove k = (if Error or Input'Length <= 0 then 0 else if I = Input'First then (To_Integer ((Oadd ((Oadd (Zero, (To_Big_Integer (.......)))), ...)))) else ...) (e.g. when Error = False and I = 0 and Input = (others => (Offset => 0, Length => 0, Next_C => 'NUL')) and Input'First = 0 and Input'Last = 0 and k = 0)[#4]
lz77.adb:113:68: medium: precondition might fail (e.g. when I = 1 and Input = (1 => (Offset => 0, Length => Natural'Last, Next_C => 'NUL'), others => (Offset => 0, Length => 0, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1)[#1]
lz77.adb:115:54: medium: precondition might fail (e.g. when I = 2 and Input = (1 => (Offset => 0, Length => 1, Next_C => 'NUL'), 2 => (Offset => 1, Length => -2147483650, Next_C => 'NUL'), others => (Offset => 1, Length => 1, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 2)[#2]
lz77.adb:172:44: medium: loop invariant might fail after first iteration, cannot prove Output (Output'First - 1 + k + 1 + Q) = Output (Output'First - 1 + k + 1 - Input (I).Offset + Q) (e.g. when I = 2 and Input = (1 => (Offset => 0, Length => 0, Next_C => 'SOH'), 2 => (Offset => 1, Length => 3, Next_C => 'SOH'), others => (Offset => 1, Length => 1, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 2 and Output = (4 => 'SOH', 5 => 'NUL', others => 'NUL') and Output'First = 1 and Q = 0 and k = 4)[#0]
lz77.adb:214:21: medium: array index check might fail (e.g. when Output'First = 1 and Output'Last = 0)[#6]
lz77.ads:118:11: medium: postcondition might fail, cannot prove not Valid (Input, Input'last) (e.g. when Input = (others => (Offset => 0, Length => 0, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 0)[#5]
lz77.ads:136:12: medium: postcondition might fail, cannot prove Output_Length = To_Integer (Decoded_Length (Input)) (e.g. when Input = (1 => (Offset => 0, Length => 0, Next_C => 'X'), others => (Offset => 0, Length => 0, Next_C => 'X')) and Input'First = 1 and Input'Last = 1 and Output_Length = 0)[#7]
