lz77.adb:189:41: medium: overflow check might fail (e.g. when J = 1 and Output'First = 2147483647 and k = 0)[#3]
lz77.adb:189:41: medium: array index check might fail (e.g. when J = 1 and Output'First = 1 and Output'Last = 1 and k = 0)[#4]
lz77.adb:189:71: medium: overflow check might fail (e.g. when Output'First = 2147483647 and k = 1) [possible explanation: loop at line 185 should mention k in a loop invariant][#0]
lz77.adb:189:94: medium: overflow check might fail (e.g. when I = 1 and Input = (1 => (Offset => -2147483646, Length => 2, Next_C => 'NUL'), others => (Offset => -2147483646, Length => -2147483646, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1 and J = 1 and Output'First = 1 and k = 0)[#1]
lz77.adb:189:94: medium: array index check might fail (e.g. when I = 1 and Input = (1 => (Offset => -1, Length => 1, Next_C => 'NUL'), others => (Offset => -1, Length => -1, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1 and J = 0 and Output'First = 1 and Output'Last = 1 and k = 0)[#2]
lz77.adb:192:34: medium: overflow check might fail (e.g. when Output'First = 1 and k = Natural'Last) [possible explanation: loop at line 185 should mention k in a loop invariant][#5]
lz77.adb:192:38: medium: overflow check might fail (e.g. when I = 1 and Input = (1 => (Offset => -2147483650, Length => -2147483650, Next_C => 'NUL'), others => (Offset => -2147483650, Length => -2147483650, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1 and Output'First = 1 and k = 0) [possible explanation: loop at line 185 should mention k in a loop invariant][#6]
lz77.adb:192:38: medium: array index check might fail (e.g. when I = 1 and Input = (1 => (Offset => 0, Length => 1, Next_C => 'NUL'), others => (Offset => 1, Length => 1, Next_C => 'NUL')) and Input'First = 1 and Input'Last = 1 and Output'First = 1 and Output'Last = 1 and k = 0) [possible explanation: loop at line 185 should mention k in a loop invariant][#7]
lz77.adb:194:20: medium: overflow check might fail (e.g. when I = Natural'Last)[#8]
lz77.ads:117:14: medium: postcondition might fail, cannot prove Output_Length = To_Integer(Decoded_Length(Input)) (e.g. when Input = (others => (Offset => 0, Length => 0, Next_C => 'NUL')) and Input'First = 2 and Input'Last = 1 and Output_Length = 0)[#9]
